/*****************************************************************************
 * Copyright (c) 2021, Lev Serebryakov <lev@serebryakov.spb.ru>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 ****************************************************************************/
plugins {
  id 'me.champeau.jmh' version '0.6.6'
}

apply plugin: 'java'
apply plugin: 'idea' // To allow JMH plugin propagate its dependencies to IDEA
apply plugin: 'me.champeau.jmh'

version = '0.5.0'

repositories {
  mavenCentral()
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter:5.4.1'
}

jmh {
  jmhVersion = '1.34'
  fork = 2
  warmupIterations = 5
  warmup = '5s'
  iterations = 10
  timeOnIteration = '10s'
}

// Enable "foregin" module, allow to load native libraries for everyone
tasks.withType(JavaCompile) {
  options.compilerArgs += ["--add-modules", "jdk.incubator.vector" ]
}

tasks.withType(Test) {
  jvmArgs += [ "--add-modules", "jdk.incubator.vector" ]
}

tasks.withType(JavaExec) {
  jvmArgs += [ "--add-modules", "jdk.incubator.vector" ]
}

// Why doesn't `tasks.withType(JmhBytecodeGeneratorTask)` work?
tasks.named('jmhRunBytecodeGenerator') {
  // Why doesn't `jvmArgs += ["--add-modules", "jdk.incubator.vector"]` work?!
  jvmArgs.addAll([ "--add-modules", "jdk.incubator.vector" ])
}

// Why doesn't `tasks.withType(JMHTask)` work?
// Why do I need this after `tasks.withType(JavaExec)`?!
tasks.named('jmh') {
  // Why doesn't `jvmArgs += ["--add-modules", "jdk.incubator.vector"]` work?!
  jvmArgs.addAll([ "--add-modules", "jdk.incubator.vector" ])
}
